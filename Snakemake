configfile: "config.yaml"

READS = config["reads"]
STRAIN_DB = config["strain_db"]
OUTDIR = config["output"] + config["run_id"] + "/"
HOST_FILE = config["host_genome"]
VIRUSES = config["viral_genomes"]
BARCODES = [f for f in os.listdir(READS) if not f.startswith('.')]

all_input = [
    OUTDIR + "on.target.stats",
    expand(OUTDIR + "{barcode}/{barcode}.reads.per.strain.samtools.idxstats", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.pre.dedup.rl.tsv", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.post.dedup.rl.tsv", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.reads.per.strain.filtered.tsv", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.start.read.count.txt", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.hard.trim.count.txt", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.chimeric.count.txt", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.viral.targets.log", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/{barcode}.viral.target.genomes.fasta", barcode = BARCODES),
    expand(OUTDIR + "{barcode}/add_sample_info.done", barcode = BARCODES)
]

rule all:
    input:
        all_input

## PREP INFO FOR TARGET STRAIN SELECTION #######################################
rule all_virus_bed:
    input:
        VIRUSES
    output:
        temp(OUTDIR + "all.viral.targets.bed")
    conda:
        "envs/alignment.yaml"
    shell:
        "samtools faidx {input}; "
        "cat {input}.fai | "
        "awk '{{print $1\"\t0\t\"$2}}' >  {output}; "
        "rm {input}.fai"

if STRAIN_DB == "":
    rule gen_strain_db:
        input:
            VIRUSES
        output:
            "data/viruses/strain_db.tsv"
        params:
            email = config["email"]
        conda:
            "envs/strain_db.yaml"
        shell:
            "python scripts/gen_strain_source_db.py "
            "--infile {input} "
            "--email {params.email} "
            "--outfile {output}"
    
    STRAIN_DB = "data/viruses/strain_db.tsv"

## CONCAT RAW DATA #############################################################

rule concat_parts:
    input:
        READS + "{barcode}"
    output:
        temp(OUTDIR + "{barcode}/{barcode}.concat.fastq.gz")
    shell:
        "cat {input}/* > {output}"

rule start_read_count:
    input:
        OUTDIR + "{barcode}/{barcode}.concat.fastq.gz"
    output:
        OUTDIR + "{barcode}/{barcode}.start.read.count.txt"
    shell:
        "bash scripts/start_counts.sh {input} {output}"

## TRIM READS ##################################################################

rule trim_reads: # want to trim nanopore (8) + UMI (5) + illumina adaptors (24) 
    input:
       OUTDIR + "{barcode}/{barcode}.concat.fastq.gz"
    output:
        logfile = OUTDIR + "{barcode}/{barcode}.trimmed.log",
        trimmed_reads = OUTDIR + "{barcode}/{barcode}.trimmed.fastq.gz"
    params:
        crop = config["crop_len"],
        barcodes = config["barcodes"]
    conda:
        "envs/trimming.yaml"
    shell:
        "python scripts/trim.py "
        "--infile {input} "
        "--logfile {output.logfile} "
        "--outfile {output.trimmed_reads} "
        "--barcodes {params.barcodes} "
        "--crop {params.crop}"

rule hard_trim_count:
    input:
        OUTDIR + "{barcode}/{barcode}.trimmed.log"
    output:
        OUTDIR + "{barcode}/{barcode}.hard.trim.count.txt"
    shell:
        "cat {input} | "
        "awk '{{ if ($0 ~ /short/) print }}' | "
        "wc -l > {output}"

rule chimeric_count:
    input:
        OUTDIR + "{barcode}/{barcode}.trimmed.fastq.gz"
    output:
        OUTDIR + "{barcode}/{barcode}.chimeric.count.txt"
    shell:
        "zcat {input} | "
        "awk '{{ if ($0 ~ /_A/ || $0 ~ /_B/) print $0 }}' | "
        "wc -l > {output}"

## DEDUPLICATE #################################################################

rule pre_dedup_read_lengths:
    input:
        OUTDIR + "{barcode}/{barcode}.trimmed.fastq.gz"
    output:
        OUTDIR + "{barcode}/{barcode}.pre.dedup.rl.tsv"
    conda:
        "envs/deduplication.yaml"
    shell:
        "python scripts/read_lengths.py --infile {input} --outfile {output}"

rule bin_reads_by_length:
    input:
        OUTDIR + "{barcode}/{barcode}.trimmed.fastq.gz"
    output:
        touch(OUTDIR + "{barcode}/{barcode}.bin.reads.done")
    params:
        outdir = OUTDIR + "{barcode}/read_bins"
    conda:
        "envs/deduplication.yaml"
    shell:
        "mkdir -p {params.outdir}; "
        "python scripts/bin_reads.py "
        "--infile {input} "
        "--outdir {params.outdir}"

rule cluster_reads:
    input:
        OUTDIR + "{barcode}/{barcode}.bin.reads.done"
    output:
        touch(OUTDIR + "{barcode}/{barcode}.cluster.reads.done")
    params:
        similarity_threshold = config["silimarity_threshold"],
        indir = OUTDIR + "{barcode}/read_bins",
        outdir = OUTDIR + "{barcode}/read_clusters"
    conda:
        "envs/deduplication.yaml"
    shell:
        "mkdir -p {params.outdir}; "
        "python scripts/cluster_reads.py "
        "--threshold {params.similarity_threshold} "
        "--indir {params.indir} "
        "--outdir {params.outdir}; "
        "rm -rf {params.indir}; "
        "rm {input}"

rule blat_clustered_reads:
    input:
        OUTDIR + "{barcode}/{barcode}.cluster.reads.done"
    output:
        touch(OUTDIR + "{barcode}/{barcode}.blat.done")
    params:
        rc = OUTDIR + "{barcode}/read_clusters/",
        o = OUTDIR + "{barcode}/psl_files/"
    threads:
        32
    conda:
        "envs/deduplication.yaml"
    shell:
        "mkdir -p {params.o}; "
        "python scripts/run_blat.py "
        "--outdir {params.o} "
        "--threads {threads} "
        "--read_clusters {params.rc}; "
        "rm -rf {params.rc}; "
        "rm {input}"

rule find_duplicates:
    input:
        OUTDIR + "{barcode}/{barcode}.blat.done"
    output:
        touch(OUTDIR + "{barcode}/{barcode}.find.duplcates.done")
    params:
        similarity_threshold = config["silimarity_threshold"],
        pls_dir = OUTDIR + "{barcode}/psl_files/",
        outdir = OUTDIR + "{barcode}/duplicate_txts/"
    conda:
        "envs/deduplication.yaml"
    shell:
        "mkdir -p {params.outdir}; "
        "bash scripts/run_find_duplicates.sh "
        "{params.outdir} "
        "{params.pls_dir} "
        "{params.similarity_threshold}; "
        "rm -rf {params.pls_dir}; "
        "rm {input}"

rule merge_duplicates_lists:
    input:
        OUTDIR + "{barcode}/{barcode}.find.duplcates.done"
    output:
        OUTDIR + "{barcode}/duplicates.txt"
    params:
        indir = OUTDIR + "{barcode}/duplicate_txts"
    shell:
        "cat {params.indir}/* > {output}; "
        "rm -rf {params.indir}"

rule deduplicate: # find reads here?
    input:
        reads = OUTDIR + "{barcode}/{barcode}.trimmed.fastq.gz",
        duplicates_list = OUTDIR + "{barcode}/duplicates.txt"
    output:
        reads = OUTDIR + "{barcode}/{barcode}.dedup.fastq.gz",
        dupes = OUTDIR + "{barcode}/{barcode}.dup.reads.fastq.gz"
    conda:
        "envs/deduplication.yaml"
    shell:
        "python scripts/deduplicate.py "
        "--reads {input.reads} "
        "--duplicates {input.duplicates_list} "
        "--out_reads {output.reads} "
        "--out_dupes {output.dupes}"

rule post_dedup_read_lengths:
    input:
        OUTDIR + "{barcode}/{barcode}.dedup.fastq.gz"
    output:
        OUTDIR + "{barcode}/{barcode}.post.dedup.rl.tsv"
    conda:
        "envs/deduplication.yaml"
    shell:
        "python scripts/read_lengths.py --infile {input} --outfile {output}"

## REMOVE HOST DNA #############################################################
rule align_reads_to_host:
    input:
        host = HOST_FILE,
        barcodes = OUTDIR + "{barcode}/{barcode}.dedup.fastq.gz",
    output:
        temp(OUTDIR + "{barcode}/{barcode}.host.sam")
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "minimap2 --secondary=no "
        "-t {threads} "
        "-o {output} "
        "-a {input.host} {input.barcodes}"

rule host_sam_to_bam:
    input:
        OUTDIR + "{barcode}/{barcode}.host.sam"
    output:
        temp(OUTDIR + "{barcode}/{barcode}.host.sorted.bam")
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "samtools view -Sb {input} | "
        "samtools sort -@ {threads} -o {output}"

rule remove_host_dna: # not counting supp alignments for `host.removal`
    input:
        OUTDIR + "{barcode}/{barcode}.host.sorted.bam"
    output:
        idx = temp(OUTDIR + "{barcode}/{barcode}.remove.host.samtools.idxstats"),
        bam = temp(OUTDIR + "{barcode}/{barcode}.host.removed.sorted.bam")
    conda:
        "envs/alignment.yaml"
    threads:
        10
    shell:
        "samtools index {input} && "
        "samtools view -h -F 2048 -b {input} | "
        "samtools idxstats - > {output.idx}; "
        "samtools view -h -f 4 -b {input} -o {output.bam}; "
        "rm {input}.bai"

rule host_removal_stats:
    input:
        expand(OUTDIR + "{barcode}/{barcode}.remove.host.samtools.idxstats", barcode = BARCODES)
    output:
        temp(OUTDIR + "host.removal.stats")
    conda:
        "envs/alignment.yaml"
    shell:
        "python scripts/samtools_idxstats.py -i {input} -o {output}"

rule non_host_reads:
    input:
        OUTDIR + "{barcode}/{barcode}.host.removed.sorted.bam"
    output:
        OUTDIR + "{barcode}/{barcode}.non.host.fastq.gz"
    params:
        fq = OUTDIR + "{barcode}/{barcode}.non.host.fastq"
    conda:
        "envs/alignment.yaml"
    threads:
        4
    shell:
        "samtools fastq {input} > {params.fq}; "
        "bgzip -@ {threads} {params.fq}"
        #"bedtools bamtofastq -i {input} -fq {output}" # WAS CAUSING DUPLICATION OF READS...

## GET VIRAL DB STATS ##########################################################

rule align_to_viruses_for_stats_no_secondary: # FIRST SIGN OF DUPES
    input:
        viruses = VIRUSES,
        barcodes = OUTDIR + "{barcode}/{barcode}.non.host.fastq.gz"
    output:
        temp(OUTDIR + "{barcode}/{barcode}.stats.viruses.sam")
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "minimap2 "
        "--secondary=no "
        "--q-occ-frac 0 "
        "-f 0 "
        "-t {threads} "
        "-o {output} "
        "-a {input.viruses} {input.barcodes}"

rule viruses_alignment_stats: # not counting supp alignments for `viral.stats`
    input:
        OUTDIR + "{barcode}/{barcode}.stats.viruses.sam"
    output:
        temp(OUTDIR + "{barcode}/{barcode}.all.viruses.samtools.idxstats")
    params:
        cutoff = config["sftclp_cutoff"],
        bam = OUTDIR + "{barcode}/{barcode}.stats.viruses.sorted.bam",
        sftbam = OUTDIR + "{barcode}/{barcode}.stats.viruses.sorted.sftclp.bam"
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "samtools view -h -F 2048 -Sb {input} | "
        "samtools sort -@ {threads} -o {params.bam}; "
        "samtools index -@ {threads} {params.bam}; "
        "python scripts/sftclipper.py "
        "--cutoff {params.cutoff} "
        "--bam {params.bam} "
        "--outfile {params.sftbam}; "
        "samtools index -@ {threads} {params.sftbam}; "
        "samtools idxstats {params.sftbam} > {output}; "
        "rm {params.bam} {params.bam}.bai; "
        "rm {params.sftbam} {params.sftbam}.bai"

## ON TARGET STATS #############################################################

rule merge_viral_alignment_stats:
    input:
        expand(OUTDIR + "{barcode}/{barcode}.all.viruses.samtools.idxstats", barcode = BARCODES)
    output:
        temp(OUTDIR + "all.viruses.stats")
    conda:
        "envs/alignment.yaml"
    shell:
        "python scripts/samtools_idxstats.py -i {input} -o {output}"

rule on_target_stats:
    input:
        viral_stats = OUTDIR + "all.viruses.stats",
        host_stats = OUTDIR + "host.removal.stats"
    output:
        OUTDIR + "on.target.stats"
    conda:
        "envs/alignment.yaml"
    shell:
        "python scripts/merge_stats.py "
        "--host_stats {input.host_stats} "
        "--viral_stats {input.viral_stats} "
        "--outfile {output}"

## VIRAL STRAIN SELECTION ######################################################

rule align_to_viruses_with_secondary:
    input:
        viruses = VIRUSES,
        barcodes = OUTDIR + "{barcode}/{barcode}.non.host.fastq.gz"
    output:
        temp(OUTDIR + "{barcode}/{barcode}.viruses.sam")
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "minimap2 "
        "--q-occ-frac 0 "
        "-f 0 "
        "-t {threads} "
        "-o {output} "
        "-a {input.viruses} {input.barcodes}"

rule viruses_sam_to_bam: # not counting supp alignments for `reads.per.strain`
    input:
        OUTDIR + "{barcode}/{barcode}.viruses.sam"
    output:
        bam = OUTDIR + "{barcode}/{barcode}.viruses.sorted.sftclp.bam",
        idx = temp(OUTDIR + "{barcode}/{barcode}.reads.per.strain.samtools.idxstats")
    params:
        cutoff = config["sftclp_cutoff"],
        tmp_bam = OUTDIR + "{barcode}/{barcode}.viruses.sorted.bam"
    conda:
        "envs/alignment.yaml"
    threads:
        32
    shell:
        "samtools view -Sb {input} | "
        "samtools sort -@ {threads} -o {params.tmp_bam}; "
        "samtools index -@ {threads} {params.tmp_bam}; "
        "python scripts/sftclipper.py "
        "--cutoff {params.cutoff} "
        "--bam {params.tmp_bam} "
        "--outfile {output.bam}; "
        "samtools index -@ {threads} {output.bam}; "
        "samtools view -h -F 2048 -b {output.bam} | "
        "samtools idxstats - > {output.idx}; "
        "rm {params.tmp_bam} {params.tmp_bam}.bai"

rule reads_per_strain:
    input:
        stats = OUTDIR + "{barcode}/{barcode}.reads.per.strain.samtools.idxstats",
        strain_db = STRAIN_DB
    output:
        OUTDIR + "{barcode}/{barcode}.reads.per.strain.tsv"
    conda:
        "envs/alignment.yaml"
    shell:
        "python scripts/summarize_idxstats.py "
        "--infile {input.stats} "
        "--strains {input.strain_db} "
        "--outfile {output}"

rule filter_reads_per_strain:
    input:
        OUTDIR + "{barcode}/{barcode}.reads.per.strain.tsv"
    output:
        OUTDIR + "{barcode}/{barcode}.reads.per.strain.filtered.tsv"
    shell:
        "cat {input} | "
        "awk -F'\t' '{{ if($3 > 0) print}}' > {output}"

rule mpileup:
    input:
        OUTDIR + "{barcode}/{barcode}.viruses.sorted.sftclp.bam"
    output:
        OUTDIR + "{barcode}/{barcode}.mpileup"
    conda:
        "envs/alignment.yaml"
    threads:
        10
    shell:
        "samtools mpileup --output-QNAME {input} | "
        "awk '{{print $1\"\t\"$4}}' - > {output}"

rule find_viral_targets:
    input:
        pileup = OUTDIR + "{barcode}/{barcode}.mpileup",
        all_viruses_bed = OUTDIR + "all.viral.targets.bed",
        strain_db = STRAIN_DB
    output:
        bed = temp(OUTDIR + "{barcode}/{barcode}.viral.targets.bed"),
        logfile = OUTDIR + "{barcode}/{barcode}.viral.targets.log",
        selected_log = OUTDIR + "{barcode}/{barcode}.selected.viral.targets.log"
    params:
        email = config["email"]
    conda:
        "envs/alignment.yaml"
    shell:
        "python scripts/find_viral_targets.py "
        "--mpileup {input.pileup} "
        "--bed {input.all_viruses_bed} "
        "--strains {input.strain_db} "
        "--logfile {output.logfile} "
        "--outfile {output.bed}; "
        "python scripts/add_viral_segments.py "
        "--infile {output.logfile} "
        "--email {params.email}; "
        "awk -F'\t' '{{ if($3 > 80.0) print}}' {output.logfile} > {output.selected_log}"

rule get_viral_genomes:
    input:
        fasta = VIRUSES,
        bed = OUTDIR + "{barcode}/{barcode}.viral.targets.bed"
    output:
        OUTDIR + "{barcode}/{barcode}.viral.target.genomes.fasta"
    params:
        succeed = OUTDIR + "{barcode}/{barcode}.VIRAL.TARGETS.FOUND",
        fail = OUTDIR + "{barcode}/{barcode}.NO.VIRAL.TARGETS"
    conda:
        "envs/alignment.yaml"
    shell:
        "bedtools getfasta -fi {input.fasta} -bed {input.bed} -fo {output}; "
        "if grep -q . {output}; then touch {params.succeed}; else touch {params.fail}; fi"


rule add_sample_info:
    input:
        OUTDIR + "{barcode}/{barcode}.pre.dedup.rl.tsv",
        OUTDIR + "{barcode}/{barcode}.post.dedup.rl.tsv",
        OUTDIR + "{barcode}/{barcode}.reads.per.strain.tsv",
        OUTDIR + "{barcode}/{barcode}.reads.per.strain.filtered.tsv",
        OUTDIR + "{barcode}/{barcode}.viral.targets.log",
        OUTDIR + "{barcode}/{barcode}.selected.viral.targets.log"
    output:
        touch(OUTDIR + "{barcode}/add_sample_info.done")
    params:
        run_id = config["run_id"],
        sample_id = "{barcode}"
    shell:
        "python scripts/add_run_info.py "
        "--sample_id {params.sample_id} "
        "--run_id {params.run_id} "
        "--infiles {input}"